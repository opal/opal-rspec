require 'opal_filters'

OpalFilters.group('Failures') do
  # infinite loop?
  fails "#include matcher Composing matchers with `include` expect(array).to include(matcher) works with comparison matchers"

  # exit called
  fails "RSpec::Matchers::Composable when an unexpected call stack jump occurs issue a warning suggesting `expects_call_stack_jump?` has been improperly declared"
end

OpalFilters.group('Bugs') do
  fails "RSpec::Expectations::Configuration#backtrace_formatter defaults to a null formatter when rspec-core is not loaded",  "method 'configuration' not defined in"
  fails "RSpec::Expectations::Configuration configuring rspec-expectations directly behaves like configuring the expectation syntax can limit the syntax to :should",  "expected NameError but nothing was raised"
  fails "RSpec::Expectations::Configuration configuring rspec-expectations directly behaves like configuring the expectation syntax `:should` being enabled by default deprecation includes the call site in the deprecation warning by default",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Expectations::Configuration configuring using the rspec-core config API behaves like configuring the expectation syntax can limit the syntax to :should",  "expected NameError but nothing was raised"
  fails "RSpec::Expectations::Configuration configuring using the rspec-core config API behaves like configuring the expectation syntax `:should` being enabled by default deprecation includes the call site in the deprecation warning by default",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Expectations::ExpectationTarget when constructed via #expect fails an invalid positive expectation",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected: 4.*got: 5/m, go"
  fails "RSpec::Expectations::FailureAggregator ensures the sub-failure backtraces are in a form that overlaps with the aggregated failure backtrace",  "expected: > 70"
  fails "RSpec::Expectations::FailureAggregator when an expectation failure happens in another thread includes the failure in the failures array if there are other failures",  "expected Exception with an object having attributes {\"class\" => RSpec::Expectations::MultipleExpectat"
  fails "RSpec::Expectations::FailureAggregator when an expectation failure happens in another thread propagates it as-is if there are no other failures or errors",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `2.odd?` to return true, got fals"
  fails "RSpec::Expectations::FailureAggregator message formatting enumerates the failures with an index label, the path of each failure and a blank line in between",  "expected #<RSpec::Expectations::FailureAggregator:0x1ba42 @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::FailureAggregator message formatting mentions how many failures there are",  "expected #<RSpec::Expectations::FailureAggregator:0x1bf14 @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::FailureAggregator message formatting allows the user to name the `aggregate_failures` block",  "expected #<RSpec::Expectations::FailureAggregator:0x1c3d8 @block_label=\"testing odd vs even\" @metadat"
  fails "RSpec::Expectations::FailureAggregator message formatting when another error has occcured includes it in the failure message",  "expected #<RSpec::Expectations::FailureAggregator:0x1c8a8 @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::FailureAggregator message formatting when the failure messages have multiple lines indents them appropriately so that they still line up",  "expected #<RSpec::Expectations::FailureAggregator:0x1cd6c @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::FailureAggregator message formatting when the failure messages have multiple lines accounts for the width of the index when indenting",  "expected #<RSpec::Expectations::FailureAggregator:0x1d230 @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::FailureAggregator message formatting when the failure messages starts and ends with line breaks (as the `eq` failure message does) strips the excess line breaks so that it formats well",  "expected #<RSpec::Expectations::FailureAggregator:0x1d840 @block_label=nil @metadata={} @seen_source_"
  fails "RSpec::Expectations::Syntax when passing a message to an expectation expect(...).to prints a warning when the message object isn't a String",  "(Kernel).warn(/ignoring.*message/)"
  fails "RSpec::Expectations::Syntax when passing a message to an expectation expect(...).not_to prints a warning when the message object isn't a String",  "(Kernel).warn(/ignoring.*message/)"
  fails "RSpec::Matchers::AliasedMatcher can get a method object for delegated methods",  "undefined method `foo' for class `RSpec::Matchers::AliasedMatcher'"
  fails "RSpec::Matchers::AliasedMatcher when making a copy via `dup` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::AliasedMatcher when making a copy via `clone` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers is expected to have an alias for \"have attributes {\\\"age\\\" => 32}\" with description: \"an object having attributes {:age => 32}\"",  "expected #<RSpec::Matchers::AliasedMatcher:0x1fdf4> to be aliased to #<RSpec::Matchers::BuiltIn::Have"
  fails "RSpec::Matchers is expected to have an alias for \"have attributes {\\\"age\\\" => 32}\" with description: \"having attributes {:age => 32}\"",  "expected #<RSpec::Matchers::AliasedMatcher:0x1fe5a> to be aliased to #<RSpec::Matchers::BuiltIn::Have"
  fails "RSpec::Matchers is expected to have an alias for \"include {\\\"a\\\" => 5}\" with description: \"a hash including {:a => 5}\"",  "expected #<RSpec::Matchers::AliasedMatcher:0x1ff54> to be aliased to #<RSpec::Matchers::BuiltIn::Incl"
  fails "RSpec::Matchers is expected to have an alias for \"throw foo\" with description: \"a block throwing :foo\"",  "expected #<RSpec::Matchers::AliasedMatcher:0x20482> to be aliased to #<RSpec::Matchers::BuiltIn::Thro"
  fails "RSpec::Matchers is expected to have an alias for \"throw foo\" with description: \"throwing :foo\"",  "expected #<RSpec::Matchers::AliasedMatcher:0x204d4> to be aliased to #<RSpec::Matchers::BuiltIn::Thro"
  fails "RSpec::Matchers::BuiltIn::All when making a copy via `clone` when using a custom matcher copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::BuiltIn::All when making a copy via `dup` when using a custom matcher copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::BuiltIn::All when using a matcher instance that memoizes state multiple times in a composed expression works properly in spite of the memoization",  "expected RSpec::Expectations::ExpectationNotMetError, got #<Exception: Maximum call stack size exceed"
  fails "RSpec::Matchers::BuiltIn::All when using a matcher instance that memoizes state multiple times in a composed expression when passing a compound expression works properly in spite of the memoization",  "expected RSpec::Expectations::ExpectationNotMetError, got #<Exception: Maximum call stack size exceed"
  fails "expect(...).to be_predicate handles keyword arguments to the predicate",  "undefined method `object' for #<RSpec::ExampleGroups::ExpectToBePredicate \"handles keyword arguments "
  fails "expect(...).to be_predicate fails when :predicate? is private",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /private/ but nothing was "
  fails "expect(...).to be_predicate(&block) passes when actual returns true for :predicate?(&block)",  "#<Double \"actual\"> asked to yield |[]| but no block was passed"
  fails "expect(...).to be_predicate(&block) fails when actual returns false for :predicate?(&block)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Double \\\"actual\\\">.happy?` to "
  fails "expect(...).to be_predicate(&block) passes the block on to the present-tense predicate form",  "no block given"
  fails "expect(...).to be_predicate(&block) prefers a { ... } block to a do/end block because it binds more tightly",  "expected `#<Object:0x24f84>.frown?` to return true, got false"
  fails "expect(...).not_to be_predicate(&block) passes when actual returns false for :predicate?(&block)",  "#<Double \"actual\"> asked to yield |[]| but no block was passed"
  fails "expect(...).not_to be_predicate(&block) fails when actual returns true for :predicate?(&block)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Double \\\"actual\\\">.happy?` to "
  fails "expect(...).to be_predicate(*args, &block) passes when actual returns true for :predicate?(*args, &block)",  "#<Double \"actual\"> asked to yield |[3]| but no block was passed"
  fails "expect(...).to be_predicate(*args, &block) fails when actual returns false for :predicate?(*args, &block)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Double \\\"actual\\\">.older_than?"
  fails "expect(...).not_to be_predicate(*args, &block) passes when actual returns false for :predicate?(*args, &block)",  "#<Double \"actual\"> asked to yield |[3]| but no block was passed"
  fails "expect(...).not_to be_predicate(*args, &block) fails when actual returns true for :predicate?(*args, &block)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Double \\\"actual\\\">.older_than?"
  fails "arbitrary predicate with DelegateClass accesses methods defined in the delegating class (LH[#48])",  "undefined method `__getobj__' for [1, 2, 3, 4, 5, 6]"
  fails "expect(actual).to be_within(delta).of(expected) fails when actual < (expected - delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 4.49 to be within 0.5 of 5.0\", go"
  fails "expect(actual).to be_within(delta).of(expected) fails when actual > (expected + delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 5.51 to be within 0.5 of 5.0\", go"
  fails "expect(actual).to be_within(delta).of(expected) provides a description",  "expected: \"be within 0.5 of 5.0\""
  fails "expect(actual).to be_within(delta).percent_of(expected) fails when actual is outside the given percent variance",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 8.9 to be within 10% of 10.0\", go"
  fails "expect(actual).to be_within(delta).percent_of(expected) provides a description",  "expected: \"be within 0.5% of 5.0\""
  fails "expect(actual).not_to be_within(delta).of(expected) fails when actual == expected",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 5.0 not to be within 0.5 of 5.0\","
  fails "expect(actual).not_to be_within(delta).of(expected) fails when actual < (expected + delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 5.49 not to be within 0.5 of 5.0\""
  fails "expect(actual).not_to be_within(delta).of(expected) fails when actual > (expected - delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 4.51 not to be within 0.5 of 5.0\""
  fails "expect(actual).not_to be_within(delta).of(expected) fails when actual == (expected - delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 4.5 not to be within 0.5 of 5.0\","
  fails "expect(actual).not_to be_within(delta).of(expected) fails when actual == (expected + delta)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected 5.5 not to be within 0.5 of 5.0\","
  fails "expect(regex).to match(string).with_captures with a string target has a sensible failure description with a hash including matcher",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /num => \"123\"/, got #<RSpe"
  fails "expect(regex).to match(string).with_captures with a regex target has a sensible failure description with a hash including matcher",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /num => \"123\"/, got #<RSpe"
  fails "expect { ... }.to change ... can specify the change of a variable's class",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /but is now Symbol/, got #"
  fails "expect { ... }.to change ... with set values passes when it should",  "expected result to have changed from #<Set: {1}> to #<Set: {2,1}>, but did not change"
  fails "expect { ... }.to change ... with set values fails when it should",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected (?:result|`.+?`)"
  fails "expect { ... }.to change ... with a string passes when actual is modified by the block",  "String#<< not supported. Mutable String methods are not supported in Opal."
  fails "RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) when making a copy via `dup` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.and(other_matcher) when making a copy via `clone` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) when making a copy via `dup` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::BuiltIn::Compound expect(...).to matcher.or(other_matcher) when making a copy via `clone` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "should =~ array when the array defines a `=~` method delegates to that method rather than using the contain_exactly matcher",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected: :bar/, got #<RS"
  fails "expect(array).to contain_exactly(*other_array) fails a match of 11 items with duplicates in a reasonable amount of time",  "uninitialized constant Timeout"
  fails "eq with Time objects provides additional precision on #failure_message",  "expected RSpec::Expectations::ExpectationNotMetError with a string with differing output but nothing "
  fails "eq with Time objects provides additional precision on #negative_failure_message",  "Maximum call stack size exceeded"
  fails "eq #description with \"symbol\" is \"eq :symbol\"",  "expected: \"eq :symbol\""
  fails "eq #description with {\"foo\"=>\"bar\"} is \"eq {:foo=>:bar}\"",  "expected: \"eq {:foo=>:bar}\""
  fails "eq #description with 2014-01-01 00:00:00 UTC is \"eq 2014-01-01 00:00:00.000000 +0000\"",  "expected: \"eq 2014-01-01 00:00:00.000000 +0000\""
  fails "equal does not match when !actual.equal?(expected)",  "expected not #<String:1> => \"1\""
  fails "equal suggests the `eq` matcher on failure",  "expected RSpec::Expectations::ExpectationNotMetError with \"\\nexpected #<String:1> => \\\"1\\\"\\n     got "
  fails "equal when the expected object is falsey in conditinal semantics describes itself with the expected object",  "expected: \"equal nil\""
  fails "equal when the expected object's #equal? always returns true describes itself with the expected object",  "can't define singleton"
  fails "exist matcher composes gracefully",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exists? expect(...).to exist passes if exists?",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exists? expect(...).to exist fails if not exists?",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to exist/, go"
  fails "exist matcher when the object responds to #exists? expect(...).to exist works when the object overrides `send`",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exists? expect(...).not_to exist passes if not exists?",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exists? expect(...).not_to exist fails if exists?",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to exist/"
  fails "exist matcher when the object responds to #exist? and #exists? when they both return falsey values expect(...).not_to exist passes",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exist? and #exists? when they both return falsey values expect(...).to exist fails",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to exist/, go"
  fails "exist matcher when the object responds to #exist? and #exists? when they both return truthy values expect(...).not_to exist fails",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to exist/"
  fails "exist matcher when the object responds to #exist? and #exists? when they both return truthy values expect(...).to exist passes",  "uninitialized constant RSpec::Matchers::BuiltIn::Exist::ExistenceTest::FileTest"
  fails "exist matcher when the object responds to #exist? and #exists? when they return values with different truthiness expect(...).to exist fails",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"`exist?` and `exists?` "
  fails "exist matcher when the object responds to #exist? and #exists? when they return values with different truthiness expect(...).not_to exist fails",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"`exist?` and `exists?` "
  fails "exist matcher when the object responds to #exist? and #exists? when one predicate is deprecated File has deprecated exists? will not call exists? triggering the warning",  "expected File to exist"
  fails "exist matcher when the object responds to #exist? and #exists? when one predicate is deprecated FileTest has deprecated exists? will not call exists? triggering the warning",  "uninitialized constant FileTest"
  fails "expect(...).to have_sym(*args) fails if #has_sym?(*args) returns false",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `{:b=>\\\"B\\\"}.has_key?(:a)` to ret"
  fails "expect(...).to have_sym(*args) forwards the given `{ }` block on to the `has_xyz?` method",  "no block given"
  fails "expect(...).to have_sym(*args) favors a curly brace block over a do...end one since it binds to the matcher method",  "expected `#<Object:0xc3d8>.has_some_stuff?` to return true, got false"
  fails "expect(...).to have_sym(*args) includes multiple args in the failure message if multiple args were given to the matcher",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Object:0x34d78>.has_some_stuff"
  fails "expect(...).to have_sym(*args) fails if #has_sym?(*args) is private",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /private/ but nothing was "
  fails "expect(...).to have_sym(*args) allows composable aliases to be defined",  "expected: \"an object having sym :foo\""
  fails "expect(...).not_to have_sym(*args) fails if #has_sym?(*args) returns true",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `{:a=>\\\"A\\\"}.has_key?(:a)` to ret"
  fails "expect(...).not_to have_sym(*args) includes multiple args in the failure message if multiple args were given to the matcher",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected `#<Object:0x352dc>.has_some_stuff"
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) diffs the attributes received with those expected",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"@@ -1 +1 @@\\n-:name => "
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) fails if target does not responds to any of the attributes",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) doesn't produce a diff if the target fails the respond to check",  "expected RSpec::Expectations::ExpectationNotMetError with a string excluding \"Diff\", got #<NotImpleme"
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) fails if target responds to the attribute but requires arguments",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) expect(...).to have_attributes(key => matcher) provides a description",  "expected: \"have attributes {:age => (a value > 30)}\""
  fails "#have_attributes matcher expect(...).to have_attributes(with_one_attribute) expect(...).to have_attributes(key => matcher) fails with a clear message when the matcher does not match",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to_not have_attributes(with_one_attribute) fails if target does not responds to any of the attributes",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to_not have_attributes(with_one_attribute) fails if target responds to the attribute but requires arguments",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to have_attributes(with_multiple_attributes) diffs the attributes received with those expected",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"@@ -1 +1 @@\\n-:age => 1"
  fails "#have_attributes matcher expect(...).to have_attributes(with_multiple_attributes) fails if target does not responds to any of the attributes",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to have_attributes(with_multiple_attributes) fails if target responds to the attribute but requires arguments",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to_not have_attributes(with_multiple_attributes) fails if target does not responds to any of the attributes",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#have_attributes matcher expect(...).to_not have_attributes(with_multiple_attributes) fails if target responds to the attribute but requires arguments",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected #<struct Perso"
  fails "#include matcher expect(...).to include(with_one_arg) for an arbitrary object that responds to `include?` delegates to `include?`",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /to\\ include\\ :space/, got"
  fails "#include matcher expect(...).to include(with_one_arg) for a hash target behaves like a Hash target fails if target does not include expected",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:key\\ =>\\ \"va"
  fails "#include matcher expect(...).to include(with_one_arg) for a hash target behaves like a Hash target fails if target doesn't have a key and we expect nil",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{\\}\\ to\\ inclu"
  fails "#include matcher expect(...).to include(with_one_arg) for a hash target behaves like a Hash target provides a valid diff",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"Diff:\\n@@ -1 +1 @@\\n-:b"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that subclasses Hash to treat string/symbol keys interchangeably, but returns a raw hash from #to_hash behaves like a Hash target fails if target does not include expected",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{\"key\"\\ =>\\ \"v"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that subclasses Hash to treat string/symbol keys interchangeably, but returns a raw hash from #to_hash behaves like a Hash target fails if target doesn't have a key and we expect nil",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{\\}\\ to\\ inclu"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that subclasses Hash to treat string/symbol keys interchangeably, but returns a raw hash from #to_hash behaves like a Hash target provides a valid diff",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"Diff:\\n@@ -1,3 +1,3 @@\\"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that can pass for a hash behaves like a Hash target fails if target does not include expected",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:key\\ =>\\ \"va"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that can pass for a hash behaves like a Hash target fails if target doesn't have a key and we expect nil",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{\\}\\ to\\ inclu"
  fails "#include matcher expect(...).to include(with_one_arg) for a target that can pass for a hash behaves like a Hash target provides a valid diff",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"Diff:\\n@@ -1 +1 @@\\n-:b"
  fails "#include matcher expect(...).to include(with, multiple, args) for an array target correctly diffs lists of hashes",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"Diff:\\n@@ -1 +1 @@\\n-[{"
  fails "#include matcher expect(...).to include(with, multiple, args) for a hash target fails if target does not include one of the items as a key",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"key\" => \"value"
  fails "#include matcher expect(...).to include(with, multiple, args) for a hash target fails if target does not include two of the items as keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"key\" => \"value"
  fails "#include matcher expect(...).to include(with, multiple, args) for a hash target fails if target does not include many of the items as keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"key\" => \"value"
  fails "#include matcher expect(...).not_to include(expected) for an arbitrary object that responds to `include?` delegates to `include?`",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /not\\ to\\ include\\ :stuff/"
  fails "#include matcher expect(...).not_to include(expected) for a hash target fails if target includes expected key",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:key\\ =>\\ \"va"
  fails "#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes all of the expected keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"a\" => 1, \"b\" ="
  fails "#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes one (but not all) of the expected keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"a\" => 1, \"b\" ="
  fails "#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes two (but not all) of the expected keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"a\" => 1, \"b\" ="
  fails "#include matcher expect(...).not_to include(with, multiple, args) for a hash target fails if the target includes many (but not all) of the expected keys",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"a\" => 1, \"b\" ="
  fails "#include matcher expect(...).to include(:key => value) for a hash target fails if target has a different value for key",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:key\\ =>\\ \"di"
  fails "#include matcher expect(...).to include(:key => value) for a hash target fails if target has a different key",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:other\\ =>\\ \""
  fails "#include matcher expect(...).to include(:key => value) for a non-hash target fails if the target does not contain the given hash",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\[\"a\",\\ \"b\"\\]\\ "
  fails "#include matcher expect(...).not_to include(:key => value) for a hash target fails if target includes the key/value pair",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:key\\ =>\\ \"va"
  fails "#include matcher expect(...).not_to include(:key => value) for a hash target fails if target includes the key/value pair among others",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected {\"key\" => \"value"
  fails "#include matcher expect(...).not_to include(:key => value) for a non-hash target fails if the target contains the given hash",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\[\"a\",\\ \\{:key\\"
  fails "#include matcher Composing matchers with `include` expect(array).to include(multiple, matcher, arguments) passes if target includes items satisfying all matchers",  "Maximum call stack size exceeded"
  fails "#include matcher Composing matchers with `include` expect(array).to include(multiple, matcher, arguments) fails if target does not include an item satisfying any one of the items",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\[\"foo\",\\ \"bar\""
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key => matcher) provides a description",  "expected: \"include {:a => (a value within 3 of 10)}\""
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key => matcher) fails with a clear message when the matcher does not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:a\\ =>\\ 15\\}\\"
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key_matcher) fails with a clear message when the matcher does not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:drink\\ =>\\ \""
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key_matcher => value) fails with a clear message when the value does not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:drink\\ =>\\ \""
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key_matcher => value) fails with a clear message when the matcher does not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:drink\\ =>\\ \""
  fails "#include matcher Composing matchers with `include` expect(hash).to include(key_matcher => value) fails with a clear message when several matchers do not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\{:drink\\ =>\\ \""
  fails "#include matcher Composing matchers with `include` expect(array).not_to include(multiple, matcher, arguments) passes if none of the target values satisfies any of the matchers",  "Maximum call stack size exceeded"
  fails "#include matcher Composing matchers with `include` expect(array).not_to include(multiple, matcher, arguments) fails if all of the matchers are satisfied by one of the target values",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\[\"foo\",\\ \"bar\""
  fails "#include matcher Composing matchers with `include` expect(array).not_to include(multiple, matcher, arguments) fails if the some (but not all) of the matchers are satisifed",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected\\ \\[\"foo\",\\ \"bar\""
  fails "operator matchers should == delegates message to target",  "Cannot proxy frozen objects. Symbols such as apple cannot be mocked or stubbed."
  fails "operator matchers should_not == delegates message to target",  "Cannot proxy frozen objects. Symbols such as orange cannot be mocked or stubbed."
  fails "operator matchers should === delegates message to target",  "Cannot proxy frozen objects. Symbols such as apple cannot be mocked or stubbed."
  fails "operator matchers should === fails when target.===(actual) returns false",  "Cannot proxy frozen objects. Symbols such as apple cannot be mocked or stubbed."
  fails "operator matchers should_not === delegates message to target",  "Cannot proxy frozen objects. Symbols such as orange cannot be mocked or stubbed."
  fails "operator matchers should_not === fails when target.===(actual) returns false",  "Cannot proxy frozen objects. Symbols such as apple cannot be mocked or stubbed."
  fails "operator matchers should =~ delegates message to target",  "Cannot proxy frozen objects. Symbols such as foo cannot be mocked or stubbed."
  fails "operator matchers should =~ fails when target.=~(actual) returns false",  "Cannot proxy frozen objects. Symbols such as fu cannot be mocked or stubbed."
  fails "operator matchers should_not =~ delegates message to target",  "Cannot proxy frozen objects. Symbols such as fu cannot be mocked or stubbed."
  fails "operator matchers should_not =~ fails when target.=~(actual) returns false",  "Cannot proxy frozen objects. Symbols such as foo cannot be mocked or stubbed."
  fails "output.to_stderr matcher does not produce warnings when the failure message is accessed first",  "expected: truthy value"
  fails "output.to_stdout matcher does not produce warnings when the failure message is accessed first",  "expected: truthy value"
  fails "output.to_stderr_from_any_process matcher does not produce warnings when the failure message is accessed first",  "expected: truthy value"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output.to_stderr_from_any_process passes if the block outputs to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output.to_stderr_from_any_process fails if the block does not output to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output to stderr, but di"
  fails "output.to_stderr_from_any_process matcher expect { ... }.not_to output.to_stderr_from_any_process passes if the block does not output to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.not_to output.to_stderr_from_any_process fails if the block outputs to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to not output to stderr, bu"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output('string').to_stderr_from_any_process passes if the block outputs that string to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output('string').to_stderr_from_any_process fails if the block does not output to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output \\\"foo\\\" to stderr"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output('string').to_stderr_from_any_process fails if the block outputs a different string to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output \\\"foo\\\" to stderr"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output('string').to_stderr_from_any_process passes if the block outputs a different string to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output('string').to_stderr_from_any_process passes if the block does not output to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output('string').to_stderr_from_any_process fails if the block outputs the same string to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to not output \\\"foo\\\" to st"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output(/regex/).to_stderr_from_any_process passes if the block outputs a string to stderr that matches the regex",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output(/regex/).to_stderr_from_any_process fails if the block does not output to stderr",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output(/regex/).to_stderr_from_any_process fails if the block outputs a string to stderr that does not match",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output(/regex/).to_stderr_from_any_process passes if the block outputs a string to stderr that does not match the regex",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output(/regex/).to_stderr_from_any_process passes if the block does not output to stderr",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output(/regex/).to_stderr_from_any_process fails if the block outputs a string to stderr that matches the regex",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to not o"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output(matcher).to_stderr_from_any_process passes if the block outputs a string to stderr that passes the given matcher",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to output(matcher).to_stderr_from_any_process fails if the block outputs a string to stderr that does not pass the given matcher",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output(matcher).to_stderr_from_any_process passes if the block does not output a string to stderr that passes the given matcher",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stderr_from_any_process matcher expect { ... }.to_not output(matcher).to_stderr_from_any_process fails if the block outputs a string to stderr that passes the given matcher",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to not o"
  fails "output.to_stdout_from_any_process matcher does not produce warnings when the failure message is accessed first",  "expected: truthy value"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output.to_stdout_from_any_process passes if the block outputs to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output.to_stdout_from_any_process fails if the block does not output to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output to stdout, but di"
  fails "output.to_stdout_from_any_process matcher expect { ... }.not_to output.to_stdout_from_any_process passes if the block does not output to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.not_to output.to_stdout_from_any_process fails if the block outputs to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to not output to stdout, bu"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output('string').to_stdout_from_any_process passes if the block outputs that string to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output('string').to_stdout_from_any_process fails if the block does not output to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output \\\"foo\\\" to stdout"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output('string').to_stdout_from_any_process fails if the block outputs a different string to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to output \\\"foo\\\" to stdout"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output('string').to_stdout_from_any_process passes if the block outputs a different string to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output('string').to_stdout_from_any_process passes if the block does not output to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output('string').to_stdout_from_any_process fails if the block outputs the same string to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected block to not output \\\"foo\\\" to st"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output(/regex/).to_stdout_from_any_process passes if the block outputs a string to stdout that matches the regex",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output(/regex/).to_stdout_from_any_process fails if the block does not output to stdout",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output(/regex/).to_stdout_from_any_process fails if the block outputs a string to stdout that does not match",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output(/regex/).to_stdout_from_any_process passes if the block outputs a string to stdout that does not match the regex",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output(/regex/).to_stdout_from_any_process passes if the block does not output to stdout",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output(/regex/).to_stdout_from_any_process fails if the block outputs a string to stdout that matches the regex",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to not o"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output(matcher).to_stdout_from_any_process passes if the block outputs a string to stdout that passes the given matcher",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to output(matcher).to_stdout_from_any_process fails if the block outputs a string to stdout that does not pass the given matcher",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to outpu"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output(matcher).to_stdout_from_any_process passes if the block does not output a string to stdout that passes the given matcher",  "uninitialized constant RSpec::Matchers::BuiltIn::CaptureStreamToTempfile::Tempfile"
  fails "output.to_stdout_from_any_process matcher expect { ... }.to_not output(matcher).to_stdout_from_any_process fails if the block outputs a string to stdout that passes the given matcher",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected block to not o"
  fails "expect { ... }.to raise_error issues a warning when used without an error class or message",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.to raise_error issues a warning that includes the current error when used without an error class or message",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.to raise_error issues a warning when `nil` is passed for an error class",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.to raise_error issues a warning when `nil` is passed for an error class when negated",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error with a specific error class issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error(message) issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error(NamedError) issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error(NamedError, error_message) with String issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error(NamedError, error_message) with Regexp issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "expect { ... }.not_to raise_error(NamedError, error_message) { |err| ... } issues a warning",  "Kernel received \"warn\" with unexpected arguments"
  fails "Composing matchers with `raise_error` expect { }.to raise_error(matcher) passes when the matcher matches the raised error",  "Maximum call stack size exceeded"
  fails "Composing matchers with `raise_error` expect { }.to raise_error(matcher) fails with a clear message when the matcher does not match the raised error",  "expected RSpec::Expectations::ExpectationNotMetError with a string including \"expected Exception with"
  fails "Composing matchers with `raise_error` expect { }.to raise_error(matcher) provides a description",  "expected: \"raise Exception with an attribute :foo equal to 3\""
  fails "expect(...).to respond_to(:sym) fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected \\\"this string\\\" to respond to :so"
  fails "expect(...).to respond_to(:sym).with(1).argument fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 0 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 2 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1).argument fails if :sym expects 2 or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1).argument fails if the method signature of initialize does not match",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Class.*> to re"
  fails "expect(...).to respond_to(:new) on a class that has redefined `new` uses the method signature of the redefined `new` for arg verification",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Class.*> to re"
  fails "expect(...).to respond_to(:new) on a class that has undefined `new` will not respond to new",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:new) on a class with a private `new` will not respond to new",  "expected #<Class:0x44ce8> not to respond to \"new\""
  fails "expect(...).to respond_to(:sym).with(2).arguments fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 0 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 1 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(2).arguments fails if :sym expects 3 or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails if :sym expects 0 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails if :sym expects 1 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails if :sym expects 2 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails if :sym expects 3 or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object.*> to r"
  fails "expect(...).to respond_to(:sym).with(1..2).arguments fails when new unless initialize matches the signature",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Class.*> to re"
  fails "expect(...).to respond_to(:sym).with_unlimited_arguments fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_unlimited_arguments fails if :sym expects a minimum number of arguments",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_unlimited_arguments fails if :sym expects a limited number of arguments",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_unlimited_arguments fails when target is new and initialize responds to a set number of arguments",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).not_to respond_to(:sym) fails if target responds to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with 1 arg",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with any number of args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(1).argument fails if target responds to :sym with one or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(1).argument will fail when target is new and initialize matches the argument signature",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /not to respond to :new wi"
  fails "expect(...).not_to respond_to(message1, message2) fails if target responds to message1 but not message2",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(message1, message2) fails if target responds to message2 but not message1",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(message1, message2) fails if target responds to both message1 and message2",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with 2 args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with any number args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with one or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments fails if target responds to :sym with two or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(1..2).arguments fails if target responds to :sym with one or two args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(1..2).arguments fails if target responds to :sym with any number args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(1..2).arguments fails if target responds to :sym with one or more args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with(1..2).arguments will fail when target is new and initialize matches the argument signature",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /not to respond to :new wi"
  fails "expect(...).not_to respond_to(:sym).with_unlimited_arguments fails if target responds to :sym with any number args",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with_unlimited_arguments will fail when target is new and initialize has unlimited arguments",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /not to respond to :new wi"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if :sym does not expect specified keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if :sym does not expect many specified keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if target is :new but initialize does not expect the right keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if :sym expects specified optional keywords but expects missing required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if target responds to :sym with keyword arg splat but missing required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_keywords(:foo, :bar) fails if target is :new and initialize has is missing required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if :sym expects 1 argument",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if :sym does not expect specified keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if :sym expects 2 arguments and specified optional keywords but expects missing required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails for new when target responds to initialize with the wrong mixture of arguments",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_any_keywords fails if target does not respond to :sym",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_any_keywords fails if :sym expects a limited set of keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_any_keywords fails when initialize expects a limited set of keywords and we check new",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_any_keywords fails if :sym expects missing required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).to respond_to(:sym).with_any_keywords fails if :initialize expects missing required keywords when we test new",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* to respond to"
  fails "expect(...).not_to respond_to(:sym).with_keywords(:foo, :bar) fails if target responds to :sym with specified optional keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with_keywords(:foo, :bar) fails if target responds to :sym with any keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with_keywords(:foo, :bar) fails if target initialize responds to expected keywords when checking new",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected .* not to respon"
  fails "expect(...).not_to respond_to(:sym).with_keywords(:foo, :bar) fails if target responds to :sym with specified required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with_keywords(:foo, :bar) fails if target responds to :sym with keyword arg splat",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with 2 args and specified optional keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with any number of arguments and specified optional keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with one or more arguments and specified optional keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with two or more arguments and specified optional keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with 2 args and specified required keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with(2).arguments.and_keywords(:foo, :bar) fails if target responds to :sym with 2 args and keyword arg splat",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).not_to respond_to(:sym).with_any_keywords fails if target responds to any keywords",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /expected #<Object:.*> not"
  fails "expect(...).to start_with with a hash fails with a useful error if trying to match more than one element",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /\\Aexpected {\"a\"=>\"b\", \"b\""
  fails "expect(...).to end_with with a hash raises an ArgumentError if trying to match more than one element",  "expected RSpec::Expectations::ExpectationNotMetError with message matching /\\Aexpected {\"a\"=>\"b\", \"b\""
  fails "yield_successive_args matcher has a description",  "expected: \"yield successive args([:a, 1], [:b, 2])\""
  fails "yield_successive_args matcher expect {...}.to yield_successive_args([:a, 1], [:b, 2]) fails if matched at return time only",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected given block to yield successively"
  fails "yield_successive_args matcher expect {...}.not_to yield_successive_args(matcher, matcher) passes when the successively yielded args do not match the matchers (at yield time only)",  "String#<< not supported. Mutable String methods are not supported in Opal."
  fails "yield_successive_args matcher expect {...}.not_to yield_successive_args(matcher, matcher) fails when the successively yielded args match the matchers (at yield time only)",  "expected RSpec::Expectations::ExpectationNotMetError with \"expected given block not to yield successi"
  fails "RSpec::Matchers::Composable does not blow up when surfacing descriptions from an unreadable IO object",  "expected RSpec::Expectations::ExpectationNotMetError with \"#<IO:0xa @fd=1 @flags=\\\"w\\\" @eof=false @cl"
  fails "RSpec::Matchers::Composable when using a matcher instance that memoizes state multiple times in a composed expression works properly in spite of the memoization",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::Composable when using a matcher instance that memoizes state multiple times in a composed expression when passing a compound expression works properly in spite of the memoization",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers::Composable cloning data structures containing matchers copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers.define_negated_matcher when making a copy via `dup` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "RSpec::Matchers.define_negated_matcher when making a copy via `clone` copies custom matchers properly so they can work even though they have singleton behavior",  "Maximum call stack size exceeded"
  fails "a matcher is expected to be able to have its description generated expect(...).not_to eql",  "expected: value != \"a\""
  fails "a matcher is expected to be able to have its description generated expect(...).to have_key",  "expected: \"is expected to have key :a\""
  fails "a matcher is expected to be able to have its description generated expect(...).to throw symbol",  "uncaught throw \"what_a_mess\""
  fails "a matcher is expected to be able to have its description generated expect(...).to throw symbol (with named symbol)",  "expected: \"is expected to throw :what_a_mess\""
  fails "a Matcher with no description provides a helpful message when used in a string-less example block",  "expected \"is expected to When you call a matcher in an example without a String, like this:\\n\\nspecif"
  fails "a matcher defined using the matcher DSL supports the use of required keyword arguments in definition block",  "undefined method `args' for RSpec::Support::WithKeywordsWhenNeeded"
  fails "a matcher defined using the matcher DSL supports the use of optional keyword arguments in definition block",  "undefined method `args' for RSpec::Support::WithKeywordsWhenNeeded"
  fails "RSpec::Matchers::DSL::Matcher handles multiline string diffs",  "expected: \"Diff:\\n@@ -1 +1 @@\\n-line1\\n+LINE1\\n\""
  fails "RSpec::Matchers::DSL::Matcher using deprecated APIs failure_message_for_should prints a deprecation warning",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Matchers::DSL::Matcher using deprecated APIs failure_message_for_should_not prints a deprecation warning",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Matchers::DSL::Matcher using deprecated APIs match_for_should prints a deprecation warning",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Matchers::DSL::Matcher using deprecated APIs match_for_should_not prints a deprecation warning",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Matchers::DSL::Matcher defined using the dsl can get a method object for methods in the running example",  "undefined method `a_method_in_the_example' for class `RSpec::Matchers::DSL::Matcher'"
  fails "Legacy matchers written using the RSpec 2.x `failure_message_for_should` and `failure_message_for_should_not` protocol behaves like a matcher written against a legacy protocol when matched positively warns about the deprecated protocol",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "Legacy matchers written using the RSpec 2.x `failure_message_for_should` and `failure_message_for_should_not` protocol behaves like a matcher written against a legacy protocol when matched negatively warns about the deprecated protocol",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "Legacy matchers written using the older `failure_message` and `negative_failure_message` protocol behaves like a matcher written against a legacy protocol when matched positively warns about the deprecated protocol",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "Legacy matchers written using the older `failure_message` and `negative_failure_message` protocol behaves like a matcher written against a legacy protocol when matched negatively warns about the deprecated protocol",  "#<RSpec::Core::Reporter:0xa64 @configuration=#<RSpec::Core::Configuration:0x9d6 @start_time=2022-11-0"
  fails "RSpec::Matchers#respond_to? supports the optional `include_private` arg",  "expected: false"
  fails "RSpec::Matchers#respond_to? allows `method` to get dynamic matcher methods",  "undefined method `be_happy' for class `RSpec::ExampleGroups::RSpecMatchers_2::RespondTo'"
end
